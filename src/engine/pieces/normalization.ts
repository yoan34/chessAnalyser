// src/engine/pieces/normalization.ts

// üéØ NORMALISATION AVEC CRIT√àRES DIFF√âRENTS PAR PI√àCE

// üìä SCORES MAX STANDARDIS√âS PAR CRIT√àRE
import type { BishopMetrics, KingMetrics, KnightMetrics, PawnMetrics, QueenMetrics, RookMetrics } from '../types.ts'

export const STANDARD_CRITERION_MAX = {
  // Crit√®res communs
  mobility: 2.5,
  position: 2.5,
  tactics: 2.5,
  support: 1.5,
  safety: 0.5,

  // Crit√®res sp√©cifiques
  structure: 2.5,      // Pion
  advancement: 2.5,    // Pion
  diagonals: 2.5,      // Fou
  openFiles: 2.5,      // Tour
  centralization: 2.5, // Dame
  activity: 2.5,       // Roi
  castling: 2.5        // Roi
};

// üéØ CONFIGURATION DES CRIT√àRES PAR PI√àCE
interface PieceCriteriaConfig {
  criteria: string[];           // Liste des crit√®res utilis√©s
  maxPossibleRaw: number;       // Maximum th√©orique sans poids
  targetNormalizedMax: number;  // Cible apr√®s normalisation (10)
}

const PAWN_CRITERIA_KEYS: readonly (keyof PawnMetrics)[] = ["mobility", "position", "tactics", "support", "safety", "structure", "advancement"];
const KNIGHT_CRITERIA_KEYS: readonly (keyof KnightMetrics)[] = ["mobility", "position", "tactics", "support", "safety"];
const BISHOP_CRITERIA_KEYS: readonly (keyof BishopMetrics)[] = ['mobility', 'position', 'diagonals', 'tactics', 'support', 'safety'];
const ROOK_CRITERIA_KEYS: readonly (keyof RookMetrics)[] = ['mobility', 'position', 'openFiles', 'tactics', 'support', 'safety'];
const QUEEN_CRITERIA_KEYS: readonly (keyof QueenMetrics)[] = ['mobility', 'position', 'centralization', 'tactics', 'support', 'safety'];
const KING_CRITERIA_KEYS: readonly (keyof KingMetrics)[] = ["mobility", "position", "activity", "castling", "support", "safety"];

export const PIECE_CONFIGS: Record<string, PieceCriteriaConfig> = {
  // ‚ôüÔ∏è PION - 7 crit√®res (avec tactics)
  pawn: {
    criteria: [...PAWN_CRITERIA_KEYS],
    maxPossibleRaw: 2.5 + 2.5 + 2.5 + 2.5 + 2.5 + 1.5 + 0.5, // = 14.0
    targetNormalizedMax: 10
  },

  // ‚ôû CAVALIER - 5 crit√®res
  knight: {
    criteria: [...KNIGHT_CRITERIA_KEYS],
    maxPossibleRaw: 2.5 + 2.5 + 2.5 + 1.5 + 0.5, // = 9.5
    targetNormalizedMax: 10
  },

  // ‚ôó FOU - 6 crit√®res
  bishop: {
    criteria: [...BISHOP_CRITERIA_KEYS],
    maxPossibleRaw: 2.5 + 2.5 + 2.5 + 2.5 + 1.5 + 0.5, // = 11.5
    targetNormalizedMax: 10
  },

  // ‚ôú TOUR - 6 crit√®res
  rook: {
    criteria: [...ROOK_CRITERIA_KEYS],
    maxPossibleRaw: 2.5 + 2.5 + 2.5 + 2.5 + 1.5 + 0.5, // = 11.5
    targetNormalizedMax: 10
  },

  // ‚ôõ DAME - 6 crit√®res
  queen: {
    criteria: [...QUEEN_CRITERIA_KEYS],
    maxPossibleRaw: 2.5 + 2.5 + 2.5 + 2.5 + 1.5 + 0.5, // = 11.5
    targetNormalizedMax: 10
  },

  // ‚ôö ROI - 6 crit√®res (pas de tactics)
  king: {
    criteria: [...KING_CRITERIA_KEYS],
    maxPossibleRaw: 2.5 + 2.5 + 2.5 + 2.5 + 1.5 + 0.5, // = 11.5
    targetNormalizedMax: 10
  }
};

// üîß FONCTION DE NORMALISATION G√âN√âRIQUE
export function normalizePieceEvaluation(rawScores: Record<string, number>, weights: Record<string, number>, pieceType: string): {
  weightedScores: Record<string, number>,
  totalScore: number,
  grade: string
} {

  const config = PIECE_CONFIGS[pieceType];
  if (!config) {
    throw new Error(`Configuration not found for piece type: ${pieceType}`);
  }

  // 1. üéØ APPLIQUER LES POIDS
  const weightedScores: Record<string, number> = {};
  let weightedTotal = 0;
  let maxPossibleWeighted = 0;

  for (const criterion of config.criteria) {
    const rawScore = rawScores[criterion] || 0;
    const weight = weights[criterion] || 0;
    const maxRawForCriterion = STANDARD_CRITERION_MAX[criterion as keyof typeof STANDARD_CRITERION_MAX] || 0;

    weightedScores[criterion] = rawScore * weight;
    weightedTotal += weightedScores[criterion];
    maxPossibleWeighted += maxRawForCriterion * weight;
  }

  // 2. üéØ NORMALISER SUR 0-10
  const normalizedScore = maxPossibleWeighted > 0
    ? (weightedTotal / maxPossibleWeighted) * config.targetNormalizedMax
    : 0;

  // 3. üéì CALCULER LA GRADE
  const grade = getGrade(normalizedScore);

  return {
    weightedScores,
    totalScore: Math.round(normalizedScore * 10) / 10,
    grade
  };
}

// üéì FONCTION DE GRADE
function getGrade(score: number): string {
  if (score >= 8.5) return 'A';
  if (score >= 7.0) return 'B';
  if (score >= 5.0) return 'C';
  if (score >= 3.0) return 'D';
  return 'F';
}
